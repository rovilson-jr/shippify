{
	"info": {
		"_postman_id": "b60f9ef0-59d6-4323-92a8-ffad5c608e32",
		"name": "Shippify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24658441"
	},
	"item": [
		{
			"name": "Get",
			"item": [
				{
					"name": "get_200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get-200\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  \r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(responseJson.code).not.to.eql(\"ER_ACCESS_DENIED_ERROR\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle-driver",
							"host": [
								"{{url}}vehicle-driver"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get-404\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle-driver/a",
							"host": [
								"{{url}}vehicle-driver"
							],
							"path": [
								"a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "post_200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"post-200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"vehicle_id\", jsonData.insertId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 1,\r\n    \"plate\": \"{{plate}}\",\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle",
							"host": [
								"{{url}}vehicle"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_401 (MUST FAIL)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Since I didn't implement an login verify, this test MUST FAILED if everything goes well, but in a complete implementation, it should return another response status (i.g 401). If I remove the login data from the backend implementation, the test will pass.\r",
									"*/\r",
									"pm.test(\"post-401\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.code).to.eql(\"ER_ACCESS_DENIED_ERROR\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 23,\r\n    \"plate\": \"{{plate}}\",\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle",
							"host": [
								"{{url}}vehicle"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"post-400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 23,\r\n    /* PROPOSITAL ERROR ON NEXT LINE */\r\n    \"plate\": \"{{plate}}\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle",
							"host": [
								"{{url}}vehicle"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patch",
			"item": [
				{
					"name": "patch_200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"patch-200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 2,\r\n    \"plate\": \"{{plate}}\",\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle/:id",
							"host": [
								"{{url}}vehicle"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{vehicle_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Since I didn't implement an not found verify, this test is not completed on the right way, but in a complete implementation, it should return another response status (i.g 404).\r",
									"*/\r",
									"pm.test(\"patch-404\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.info).to.eql(\"Rows matched: 0  Changed: 0  Warnings: 0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 2,\r\n    \"plate\": \"{{plate}}\",\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle/:id",
							"host": [
								"{{url}}vehicle"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"patch-400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"driver_id\": 2,\r\n    /* PROPOSITAL ERROR ON NEXT LINE */\r\n    \"plate\": \"{{plate}}\"\r\n    \"model\": \"{{model}}\",\r\n    \"type\": \"{{type}}\",\r\n    \"capacity\": \"{{capacity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle/:id",
							"host": [
								"{{url}}vehicle"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{vehicle_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "delete_200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"delete-200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle/:id",
							"host": [
								"{{url}}vehicle"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{vehicle_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Since I didn't implement an not found verify, this test is not completed on the right way, but in a complete implementation, it should return another response status (i.g 404).\r",
									"*/\r",
									"pm.test(\"delete-404\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.affectedRows).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}vehicle/:id",
							"host": [
								"{{url}}vehicle"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{vehicle_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "insertId",
			"value": ""
		},
		{
			"key": "vehicle_id",
			"value": ""
		}
	]
}